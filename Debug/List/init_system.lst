###############################################################################
#
# IAR C/C++ Compiler V7.20.1.997/W32 for MSP430           29/May/2021  20:59:50
# Copyright 1996-2020 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.20
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\nopassword\Desktop\ECE_306\Project 06\init_system.c
#    Command line  =  
#        -f C:\Users\NOPASS~1\AppData\Local\Temp\EW83A5.tmp
#        ("C:\Users\nopassword\Desktop\ECE_306\Project 06\init_system.c" -lC
#        "C:\Users\nopassword\Desktop\ECE_306\Project 06\Debug\List" -o
#        "C:\Users\nopassword\Desktop\ECE_306\Project 06\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\nopassword\Desktop\ECE_306\Project
#        06\Debug\List\init_system.lst
#    Object file   =  
#        C:\Users\nopassword\Desktop\ECE_306\Project
#        06\Debug\Obj\init_system.r43
#
###############################################################################

C:\Users\nopassword\Desktop\ECE_306\Project 06\init_system.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the System Configurations
      4          //
      5          //  Jim Carlson
      6          //  Jan 2016
      7          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
      8          //------------------------------------------------------------------------------
      9          
     10          //------------------------------------------------------------------------------
     11          #include  "functions.h"
     12          #include  "msp430.h"
     13          #include "macros.h"
     14          
     15          void enable_interrupts(void);
     16          
     17          //------------------------------------------------------------------------------
     18          // System Configurations
     19          
     20          // Tells the compiler to provide the value in reg as an input to an
     21          // inline assembly block.  Even though the block contains no instructions,
     22          // the compiler may not optimize it away, and is told that the value
     23          // may change and should not be relied upon.
     24          
     25          //inline void READ_AND_DISCARD(unsigned int reg) __attribute__((always_inline));
     26          //void READ_AND_DISCARD(unsigned int reg){
     27          //  asm volatile ("" : "=m" (reg) : "r" (reg));
     28          //}
     29          
     30          //inline void enable_interrupts(void) __attribute__((always_inline));

   \                                 In  segment CODE, align 2
     31          void Init_Interrupts(void){
   \                     Init_Interrupts:
     32            __bis_SR_register(GIE);     // enable interrupts
   \   000000   0343         NOP
   \   000002   32D2         BIS.W   #0x8, SR
     33          //  asm volatile ("eint \n");
     34          }
   \   000004   1001         RETA
     35          
     36          //inline void disable_interrupts(void) __attribute__((always_inline));
     37          //void disable_interrupts(void){
     38          //  asm volatile ("dint \n");
     39          //}
     40          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  Init_Interrupts

 
 6 bytes in segment CODE
 
 6 bytes of CODE memory

Errors: none
Warnings: none
